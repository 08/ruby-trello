var search_data = {"index":{"searchIndex":["helpers","integrationtest","container","object","string","trello","action","association","associationproxy","authorization","basicauthpolicy","clock","nonce","oauthpolicy","basicdata","board","card","checklist","client","error","hasactions","invalidaccesstoken","item","itemstate","label","list","member","multiassociation","notification","organization","tinternet","token","<<()","==()","===()","actions()","actions_details()","actions_payload()","add_checklist()","add_comment()","add_item()","add_label()","authorize()","authorize()","avatar_url()","board()","board()","boards()","boards_details()","boards_payload()","card()","card()","cards_details()","cards_payload()","checklists_details()","checklists_payload()","closed?()","closed?()","closed?()","create()","create()","create()","create()","delete()","example_class()","execute()","find()","find()","find()","find()","find()","find()","find()","find()","find()","find()","get()","get()","has_lists?()","included()","invoke_verb()","item()","items()","json_into()","label_details()","label_payload()","labels()","list()","list()","lists_details()","lists_payload()","logger()","logger=()","many()","member()","members()","members()","members()","method_missing()","new()","new()","new()","new()","new()","next()","notification_details()","notification_payload()","one()","organization()","organization_details()","organization_payload()","orgs_details()","orgs_payload()","post()","proxy_assocation()","put()","refresh!()","register_attributes()","remove_label()","save()","save()","save()","save()","save()","set()","timestamp()","to_a()","to_ary()","token_details()","token_payload()","update!()","update!()","update!()","update!()","update!()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","update_fields()","user_details()","user_payload()","valid?()","gemfile","license","rakefile","test-credentials"],"longSearchIndex":["helpers","integrationtest","integrationtest::container","object","string","trello","trello::action","trello::association","trello::associationproxy","trello::authorization","trello::authorization::basicauthpolicy","trello::authorization::clock","trello::authorization::nonce","trello::authorization::oauthpolicy","trello::basicdata","trello::board","trello::card","trello::checklist","trello::client","trello::error","trello::hasactions","trello::invalidaccesstoken","trello::item","trello::itemstate","trello::label","trello::list","trello::member","trello::multiassociation","trello::notification","trello::organization","trello::tinternet","trello::token","trello::associationproxy#<<()","trello::basicdata#==()","trello::associationproxy#===()","trello::hasactions#actions()","helpers#actions_details()","helpers#actions_payload()","trello::card#add_checklist()","trello::card#add_comment()","trello::checklist#add_item()","trello::card#add_label()","trello::authorization::basicauthpolicy::authorize()","trello::authorization::oauthpolicy::authorize()","trello::member#avatar_url()","trello::action#board()","trello::notification#board()","trello::organization#boards()","helpers#boards_details()","helpers#boards_payload()","trello::action#card()","trello::notification#card()","helpers#cards_details()","helpers#cards_payload()","helpers#checklists_details()","helpers#checklists_payload()","trello::board#closed?()","trello::checklist#closed?()","trello::list#closed?()","trello::board::create()","trello::card::create()","trello::checklist::create()","trello::list::create()","trello::client::delete()","object#example_class()","trello::tinternet::execute()","trello::action::find()","trello::basicdata::find()","trello::board::find()","trello::card::find()","trello::checklist::find()","trello::list::find()","trello::member::find()","trello::notification::find()","trello::organization::find()","trello::token::find()","integrationtest#get()","trello::client::get()","trello::board#has_lists?()","integrationtest::included()","trello::client::invoke_verb()","trello::itemstate#item()","trello::checklist#items()","string#json_into()","helpers#label_details()","helpers#label_payload()","trello::card#labels()","trello::action#list()","trello::notification#list()","helpers#lists_details()","helpers#lists_payload()","trello::logger()","trello::logger=()","trello::basicdata::many()","trello::notification#member()","trello::card#members()","trello::checklist#members()","trello::organization#members()","trello::associationproxy#method_missing()","object::new()","trello::association::new()","trello::associationproxy::new()","trello::basicdata::new()","trello::multiassociation::new()","trello::authorization::nonce::next()","helpers#notification_details()","helpers#notification_payload()","trello::basicdata::one()","trello::notification#organization()","helpers#organization_details()","helpers#organization_payload()","helpers#orgs_details()","helpers#orgs_payload()","trello::client::post()","trello::associationproxy#proxy_assocation()","trello::client::put()","trello::basicdata#refresh!()","trello::basicdata::register_attributes()","trello::card#remove_label()","trello::board#save()","trello::card#save()","trello::checklist#save()","trello::list#save()","trello::member#save()","integrationtest::container::set()","trello::authorization::clock::timestamp()","trello::associationproxy#to_a()","trello::associationproxy#to_ary()","helpers#token_details()","helpers#token_payload()","trello::board#update!()","trello::card#update!()","trello::checklist#update!()","trello::list#update!()","trello::member#update!()","trello::action#update_fields()","trello::basicdata#update_fields()","trello::board#update_fields()","trello::card#update_fields()","trello::checklist#update_fields()","trello::item#update_fields()","trello::itemstate#update_fields()","trello::label#update_fields()","trello::list#update_fields()","trello::member#update_fields()","trello::notification#update_fields()","trello::organization#update_fields()","helpers#user_details()","helpers#user_payload()","trello::card#valid?()","","","",""],"info":[["Helpers","","Helpers.html","",""],["IntegrationTest","","IntegrationTest.html","",""],["IntegrationTest::Container","","IntegrationTest/Container.html","",""],["Object","","Object.html","",""],["String","","String.html","",""],["Trello","","Trello.html","","<p>Ruby wrapper around the Trello API\n<p>First, set up your key information. You can get this information by …\n"],["Trello::Action","","Trello/Action.html","","<p>Action represents some event that occurred. For instance, when a card is\ncreated.\n"],["Trello::Association","","Trello/Association.html","",""],["Trello::AssociationProxy","","Trello/AssociationProxy.html","",""],["Trello::Authorization","","Trello/Authorization.html","",""],["Trello::Authorization::BasicAuthPolicy","","Trello/Authorization/BasicAuthPolicy.html","",""],["Trello::Authorization::Clock","","Trello/Authorization/Clock.html","",""],["Trello::Authorization::Nonce","","Trello/Authorization/Nonce.html","",""],["Trello::Authorization::OAuthPolicy","","Trello/Authorization/OAuthPolicy.html","","<p>Handles the OAuth connectivity to Trello.\n<p>For 2-legged OAuth, do the following:\n\n<pre>OAuthPolicy.consumer_credential ...</pre>\n"],["Trello::BasicData","","Trello/BasicData.html","",""],["Trello::Board","","Trello/Board.html","",""],["Trello::Card","","Trello/Card.html","","<p>A Card is a container that can house checklists and comments; it resides\ninside a List.\n"],["Trello::Checklist","","Trello/Checklist.html","","<p>A Checklist holds items which are like a “task” list. Checklists are linked\nto a card.\n"],["Trello::Client","","Trello/Client.html","",""],["Trello::Error","","Trello/Error.html","","<p>Raise this when we hit a Trello error.\n"],["Trello::HasActions","","Trello/HasActions.html","",""],["Trello::InvalidAccessToken","","Trello/InvalidAccessToken.html","","<p>This specific error is thrown when your access token is invalid. You should\nget a new one.\n"],["Trello::Item","","Trello/Item.html","","<p>An Item is a basic task that can be checked off and marked as completed.\n"],["Trello::ItemState","","Trello/ItemState.html","","<p>Represents the state of an item.\n"],["Trello::Label","","Trello/Label.html","","<p>A colored Label attached to a card\n"],["Trello::List","","Trello/List.html","","<p>A List is a container which holds cards. Lists are items on a board.\n"],["Trello::Member","","Trello/Member.html","","<p>A Member is a user of the Trello service.\n"],["Trello::MultiAssociation","","Trello/MultiAssociation.html","",""],["Trello::Notification","","Trello/Notification.html","",""],["Trello::Organization","","Trello/Organization.html","","<p>Organizations are useful for linking members together.\n"],["Trello::TInternet","","Trello/TInternet.html","",""],["Trello::Token","","Trello/Token.html","",""],["<<","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-3C-3C","(*records)",""],["==","Trello::BasicData","Trello/BasicData.html#method-i-3D-3D","(other)","<p>Two objects are equal if their <em>id</em> methods are equal.\n"],["===","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-3D-3D-3D","(other)",""],["actions","Trello::HasActions","Trello/HasActions.html#method-i-actions","(options = {})","<p>Returns a list of the actions associated with this object.\n"],["actions_details","Helpers","Helpers.html#method-i-actions_details","()",""],["actions_payload","Helpers","Helpers.html#method-i-actions_payload","()",""],["add_checklist","Trello::Card","Trello/Card.html#method-i-add_checklist","(checklist)","<p>Add a checklist to this card\n"],["add_comment","Trello::Card","Trello/Card.html#method-i-add_comment","(text)","<p>Add a comment with the supplied text.\n"],["add_item","Trello::Checklist","Trello/Checklist.html#method-i-add_item","(name)","<p>Add an item to the checklist\n"],["add_label","Trello::Card","Trello/Card.html#method-i-add_label","(colour)","<p>Add a label\n"],["authorize","Trello::Authorization::BasicAuthPolicy","Trello/Authorization/BasicAuthPolicy.html#method-c-authorize","(request)",""],["authorize","Trello::Authorization::OAuthPolicy","Trello/Authorization/OAuthPolicy.html#method-c-authorize","(request)",""],["avatar_url","Trello::Member","Trello/Member.html#method-i-avatar_url","(options = { :size => :large })","<p>Retrieve a URL to the avatar.\n<p>Valid values for options are:\n\n<pre>:large (170x170)\n:small (30x30)</pre>\n"],["board","Trello::Action","Trello/Action.html#method-i-board","()","<p>Returns the board this action occurred on.\n"],["board","Trello::Notification","Trello/Notification.html#method-i-board","()",""],["boards","Trello::Organization","Trello/Organization.html#method-i-boards","()","<p>Returns a list of boards under this organization.\n"],["boards_details","Helpers","Helpers.html#method-i-boards_details","()",""],["boards_payload","Helpers","Helpers.html#method-i-boards_payload","()",""],["card","Trello::Action","Trello/Action.html#method-i-card","()","<p>Returns the card the action occurred on.\n"],["card","Trello::Notification","Trello/Notification.html#method-i-card","()",""],["cards_details","Helpers","Helpers.html#method-i-cards_details","()",""],["cards_payload","Helpers","Helpers.html#method-i-cards_payload","()",""],["checklists_details","Helpers","Helpers.html#method-i-checklists_details","()",""],["checklists_payload","Helpers","Helpers.html#method-i-checklists_payload","()",""],["closed?","Trello::Board","Trello/Board.html#method-i-closed-3F","()",""],["closed?","Trello::Checklist","Trello/Checklist.html#method-i-closed-3F","()","<p>Check if the checklist is currently active.\n"],["closed?","Trello::List","Trello/List.html#method-i-closed-3F","()","<p>Check if the list is not active anymore.\n"],["create","Trello::Board","Trello/Board.html#method-c-create","(fields)",""],["create","Trello::Card","Trello/Card.html#method-c-create","(options)","<p>Create a new card and save it on Trello.\n"],["create","Trello::Checklist","Trello/Checklist.html#method-c-create","(options)",""],["create","Trello::List","Trello/List.html#method-c-create","(options)",""],["delete","Trello::Client","Trello/Client.html#method-c-delete","(path)",""],["example_class","Object","Object.html#method-i-example_class","()",""],["execute","Trello::TInternet","Trello/TInternet.html#method-c-execute","(request)",""],["find","Trello::Action","Trello/Action.html#method-c-find","(id)","<p>Locate a specific action and return a new Action object.\n"],["find","Trello::BasicData","Trello/BasicData.html#method-c-find","(path, id)",""],["find","Trello::Board","Trello/Board.html#method-c-find","(id)","<p>Finds a board.\n"],["find","Trello::Card","Trello/Card.html#method-c-find","(id)","<p>Find a specific card by its id.\n"],["find","Trello::Checklist","Trello/Checklist.html#method-c-find","(id)","<p>Locate a specific checklist by its id.\n"],["find","Trello::List","Trello/List.html#method-c-find","(id)","<p>Finds a specific list, given an id.\n"],["find","Trello::Member","Trello/Member.html#method-c-find","(id_or_username)","<p>Finds a user\n<p>The argument may be specified as either an <em>id</em> or a\n<em>username</em>.\n"],["find","Trello::Notification","Trello/Notification.html#method-c-find","(id)","<p>Locate a notification by its id\n"],["find","Trello::Organization","Trello/Organization.html#method-c-find","(id)","<p>Find an organization by its id.\n"],["find","Trello::Token","Trello/Token.html#method-c-find","(token)","<p>Finds a token\n"],["get","IntegrationTest","IntegrationTest.html#method-i-get","(uri)",""],["get","Trello::Client","Trello/Client.html#method-c-get","(path, params = {})",""],["has_lists?","Trello::Board","Trello/Board.html#method-i-has_lists-3F","()",""],["included","IntegrationTest","IntegrationTest.html#method-c-included","(klass)",""],["invoke_verb","Trello::Client","Trello/Client.html#method-c-invoke_verb","(name, uri, body = nil)",""],["item","Trello::ItemState","Trello/ItemState.html#method-i-item","()","<p>Return the item this state belongs to.\n"],["items","Trello::Checklist","Trello/Checklist.html#method-i-items","()","<p>Return a list of items on the checklist.\n"],["json_into","String","String.html#method-i-json_into","(obj)","<p>Decodes some JSON text in the receiver, and marshals it into a class\nspecified in <em>obj</em>. If <em>obj</em> is not …\n"],["label_details","Helpers","Helpers.html#method-i-label_details","()",""],["label_payload","Helpers","Helpers.html#method-i-label_payload","()",""],["labels","Trello::Card","Trello/Card.html#method-i-labels","()","<p>Retrieve a list of labels\n"],["list","Trello::Action","Trello/Action.html#method-i-list","()","<p>Returns the list the action occurred on.\n"],["list","Trello::Notification","Trello/Notification.html#method-i-list","()",""],["lists_details","Helpers","Helpers.html#method-i-lists_details","()",""],["lists_payload","Helpers","Helpers.html#method-i-lists_payload","()",""],["logger","Trello","Trello.html#method-c-logger","()",""],["logger=","Trello","Trello.html#method-c-logger-3D","(logger)",""],["many","Trello::BasicData","Trello/BasicData.html#method-c-many","(name, opts = {})",""],["member","Trello::Notification","Trello/Notification.html#method-i-member","()",""],["members","Trello::Card","Trello/Card.html#method-i-members","()","<p>Returns a list of members who are assigned to this card.\n"],["members","Trello::Checklist","Trello/Checklist.html#method-i-members","()","<p>Return a list of members active in this checklist.\n"],["members","Trello::Organization","Trello/Organization.html#method-i-members","()","<p>Returns an array of members associated with the organization.\n"],["method_missing","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-method_missing","(method, *args, &block)",""],["new","Object","Object.html#method-c-new","(options = {})",""],["new","Trello::Association","Trello/Association.html#method-c-new","(owner, target)",""],["new","Trello::AssociationProxy","Trello/AssociationProxy.html#method-c-new","(association)",""],["new","Trello::BasicData","Trello/BasicData.html#method-c-new","(fields = {})",""],["new","Trello::MultiAssociation","Trello/MultiAssociation.html#method-c-new","(owner, target = [])",""],["next","Trello::Authorization::Nonce","Trello/Authorization/Nonce.html#method-c-next","()",""],["notification_details","Helpers","Helpers.html#method-i-notification_details","()",""],["notification_payload","Helpers","Helpers.html#method-i-notification_payload","()",""],["one","Trello::BasicData","Trello/BasicData.html#method-c-one","(name, opts = {})",""],["organization","Trello::Notification","Trello/Notification.html#method-i-organization","()",""],["organization_details","Helpers","Helpers.html#method-i-organization_details","()",""],["organization_payload","Helpers","Helpers.html#method-i-organization_payload","()",""],["orgs_details","Helpers","Helpers.html#method-i-orgs_details","()",""],["orgs_payload","Helpers","Helpers.html#method-i-orgs_payload","()",""],["post","Trello::Client","Trello/Client.html#method-c-post","(path, body = {})",""],["proxy_assocation","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-proxy_assocation","()",""],["put","Trello::Client","Trello/Client.html#method-c-put","(path, body = {})",""],["refresh!","Trello::BasicData","Trello/BasicData.html#method-i-refresh-21","()","<p>Refresh the contents of our object.\n"],["register_attributes","Trello::BasicData","Trello/BasicData.html#method-c-register_attributes","(*names)",""],["remove_label","Trello::Card","Trello/Card.html#method-i-remove_label","(colour)","<p>Remove a label\n"],["save","Trello::Board","Trello/Board.html#method-i-save","()",""],["save","Trello::Card","Trello/Card.html#method-i-save","()","<p>Saves a record.\n"],["save","Trello::Checklist","Trello/Checklist.html#method-i-save","()","<p>Save a record.\n"],["save","Trello::List","Trello/List.html#method-i-save","()",""],["save","Trello::Member","Trello/Member.html#method-i-save","()",""],["set","IntegrationTest::Container","IntegrationTest/Container.html#method-c-set","(parent, name, value)",""],["timestamp","Trello::Authorization::Clock","Trello/Authorization/Clock.html#method-c-timestamp","()",""],["to_a","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-to_a","()",""],["to_ary","Trello::AssociationProxy","Trello/AssociationProxy.html#method-i-to_ary","()",""],["token_details","Helpers","Helpers.html#method-i-token_details","()",""],["token_payload","Helpers","Helpers.html#method-i-token_payload","()",""],["update!","Trello::Board","Trello/Board.html#method-i-update-21","()",""],["update!","Trello::Card","Trello/Card.html#method-i-update-21","()","<p>Update an existing record. Warning, this updates all fields using values\nalready in memory. If an external …\n"],["update!","Trello::Checklist","Trello/Checklist.html#method-i-update-21","()",""],["update!","Trello::List","Trello/List.html#method-i-update-21","()",""],["update!","Trello::Member","Trello/Member.html#method-i-update-21","()",""],["update_fields","Trello::Action","Trello/Action.html#method-i-update_fields","(fields)","<p>Update the attributes of an action\n<p>Supply a hash of string keyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::BasicData","Trello/BasicData.html#method-i-update_fields","(fields)",""],["update_fields","Trello::Board","Trello/Board.html#method-i-update_fields","(fields)",""],["update_fields","Trello::Card","Trello/Card.html#method-i-update_fields","(fields)","<p>Update the fields of a card.\n<p>Supply a hash of string keyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::Checklist","Trello/Checklist.html#method-i-update_fields","(fields)","<p>Update the fields of a checklist.\n<p>Supply a hash of string keyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::Item","Trello/Item.html#method-i-update_fields","(fields)","<p>Updates the fields of an item.\n<p>Supply a hash of string keyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::ItemState","Trello/ItemState.html#method-i-update_fields","(fields)","<p>Update the fields of an item state.\n<p>Supply a hash of string keyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::Label","Trello/Label.html#method-i-update_fields","(fields)","<p>Update the fields of a label.\n<p>Supply a hash of stringkeyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::List","Trello/List.html#method-i-update_fields","(fields)","<p>Updates the fields of a list.\n<p>Supply a hash of string keyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::Member","Trello/Member.html#method-i-update_fields","(fields)","<p>Update the fields of a member.\n<p>Supply a hash of string keyed data retrieved from the Trello API\nrepresenting …\n"],["update_fields","Trello::Notification","Trello/Notification.html#method-i-update_fields","(fields)",""],["update_fields","Trello::Organization","Trello/Organization.html#method-i-update_fields","(fields)","<p>Update the fields of an organization.\n<p>Supply a hash of string keyed data retrieved from the Trello API …\n"],["user_details","Helpers","Helpers.html#method-i-user_details","()",""],["user_payload","Helpers","Helpers.html#method-i-user_payload","()",""],["valid?","Trello::Card","Trello/Card.html#method-i-valid-3F","()","<p>Is the record valid?\n"],["Gemfile","","Gemfile.html","","<p>source :rubygems gem ‘rake’ gem ‘oauth’ gem ‘addressable’ gem ‘json’,\n:platforms =&gt; [ :ruby_18, :jruby …\n"],["LICENSE","","LICENSE.html","","<p>Copyright © 2012, Jeremy Tregunna\n<p>Permission is hereby granted, free of charge, to any person obtaining …\n"],["Rakefile","","Rakefile.html","","<p>require ‘rspec/core/rake_task’\n<p>RSpec::Core::RakeTask.new\n<p>task :default =&gt; [:spec]\n"],["test-credentials","","test-credentials.html","","<p>Public Key: a6ae0b8e99f9e968dfceaee32a992da9 Secret:\n0d8dc80d3b9c1af8be06a4c3dfee694a594d0b5f10592c1310a7d6ab6b5c647b …\n"]]}}